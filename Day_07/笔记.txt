	第七天上午
1.程序执行方式
	1.1顺序执行
		一个程序完全执行完毕后才能执行下一个程序
		缺点CPU利用率低

	1.2并发执行
		提高CPU利用率
		现代系统让程序并发执行，引入进程

2.进程
	test.c
	gcc test.c -o test  ->可执行程序

3.进程和程序的区别
	1.程序是静态的，进程是动态的
	2.进程是如何实现并发的
		是通过操作系统的分时系统和任务调度实现

4.Linux下创建进程的函数
	4.1创建一个新进程
		fork
		fork用来创建一个新进程，新的进程里面有什么东西？
		一个程序里面包含了些什么东西（数据（用户数据 系统数据）和指令）
		当你在程序中fork以后就产生了一个子进程，那么子进程的数据来源于哪里
		copy了父进程的数据和指令
		copy完以后，两个进程就完全独立了
	
		pit_t fork(void)
		pit_t pid=fork();

		返回值
			如果失败-1，同时errno被设置
			如果成功 
				父进程返回子进程pid(pid>0)
				子进程返回 0
	4.1进程的退出
		main函数执行完以后 表明整个进程结束
	
	4.3等待子进程退出
		在子进程正常正常退出的情况下，主进程要等待子进程先退出才可以释放子进程的资源。
		假如 在主进程结束以后，子进程还没退出，子进程就会变成僵尸进程

		wait waitpid
		
		madplay

5.exec函数族
	exec函数族是让进程如执行另一个可执行文件
	就是让另外一个程序文件的数据和指令覆盖当前进程的数据和指令
	指定参数的方式：
		1: list 
		.......参数都是以字符串的形式给的 最后一个参数是NULL
		例如 execl（"/./.../madplay","madplay","忘情水"，NULL）；
	系统中有一个环境变量	PATH
	环境就是整个系统环境（所有进程都共享）里面的变量
	指定的就是程序文件的搜索路径，意思就是当你运行一个程序时不指定程序的路径，系统就会
	自动去整个目录下找这个文件，知道找到为止，全部找完一遍还是没有的话，就会报错。
		
